import os
import sqlite3

import openpyxl
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramAPIError
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from datetime import datetime

# –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7546483359:AAFpga1WZ4qeZSChTi3eU4yP1vXNqsf6bj0'

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ username
ADMIN_USERNAME = ['rrrrr30', 'pdgrn', 'Kolesnikov15','Fable2636']
ADMIN_IDS = [83851741, 1381162664, 157648462, 787676749]
DATABASE = "drone_alert_data.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]

        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ 'subscribed' –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if 'subscribed' not in columns:
            cursor.execute('''
                        ALTER TABLE users ADD COLUMN subscribed BOOLEAN DEFAULT 0
                    ''')
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]

        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ 'timestamp' –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        if 'timestamp' not in columns:
            cursor.execute('''
                        ALTER TABLE users ADD COLUMN timestamp TEXT
                    ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                username TEXT,
                message TEXT,
                timestamp TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT UNIQUE,
                username TEXT,
                subscribed BOOLEAN,
                timestamp TEXT
            )
        ''')
        conn.commit()

async def save_alert(user_id, username, message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO alerts (user_id, username, message, timestamp)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, message, timestamp))
        conn.commit()

async def save_user(user_id, username):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, subscribed, timestamp)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, False, timestamp))  # Default subscription status is False
        conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_subscription = State()
    waiting_for_report = State()
    waiting_for_broadcast_message = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await save_user(message.from_user.id, message.from_user.username)
    channel_link = "https://t.me/astra_ban"
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç ¬´–¢–†–ï–í–û–ì–ê –ê–°–¢–†–ê–•–ê–ù–¨¬ª.\n"
        "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.\n\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
        f"–ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª ¬´–ë–ê–ù - –ë—é—Ä–æ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∏—Ö –ù–æ–≤–æ—Å—Ç–µ–π¬ª: {channel_link} –∏ –Ω–∞–∂–∞—Ç—å ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
        reply_markup=markup
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    await state.set_state(UserStates.waiting_for_subscription)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sleep –¥–ª—è –ø–∞—É–∑—ã

async def update_subscription(user_id, status=True):
    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users
            SET subscribed = ?
            WHERE user_id = ?
        ''', (status, user_id))
        conn.commit()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@dp.message(lambda message: message.text.lower() == "—è –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", UserStates.waiting_for_subscription)
async def check_subscription(message: Message, state: FSMContext):
    try:
        member = await bot.get_chat_member(chat_id="@invest_captain", user_id=message.from_user.id)
        if member.status in ['creator', 'administrator', 'member']:
            await update_subscription(message.from_user.id, status=True)
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚è≥")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(2)

            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            inline_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö® –°–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ üö®", callback_data="report_alert")]
            ])

            # –°–æ–∑–¥–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
            reply_markup = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üö® –°–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ üö®")]
                ],
                resize_keyboard=True
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π
            await message.answer(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é:",
                reply_markup=inline_markup
            )

            # –ú–µ–Ω—è–µ–º –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–°–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ"
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=reply_markup
            )
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda call: call.data == "report_alert")
async def report_alert_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–º:\n"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —Ä–∞–π–æ–Ω).\n"
        "- –í—Ä–µ–º—è –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n"
        "- –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "- –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    )
    await state.set_state(UserStates.waiting_for_report)
    await call.answer()

@dp.message(lambda message: message.text == "üö® –°–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ üö®")
async def report_button(message: Message, state: FSMContext):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–º:\n"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —Ä–∞–π–æ–Ω).\n"
        "- –í—Ä–µ–º—è –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n"
        "- –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "- –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    await state.set_state(UserStates.waiting_for_report)

# –ö–æ–º–∞–Ω–¥–∞ /report
@dp.message(Command("report"))
async def report(message: Message, state: FSMContext):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–æ–º:\n"
        "- –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —Ä–∞–π–æ–Ω).\n"
        "- –í—Ä–µ–º—è –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.\n"
        "- –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "- –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    await state.set_state(UserStates.waiting_for_report)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞
@dp.message(UserStates.waiting_for_report)
async def handle_report(message: Message, state: FSMContext):
    if message.text:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_alert(
            user_id=message.from_user.id,
            username=message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            message=message.text
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}:\n"
                    f"{message.text}\n\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö® –°–æ–æ–±—â–∏—Ç—å –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–µ üö®", callback_data="report_alert")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "–î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /report "
            "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=markup
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö user_id
@dp.message(UserStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    text = message.text
    success, fail = 0, 0

    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT user_id FROM users')  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_ids = cursor.fetchall()

    for user_id in user_ids:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
            member = await bot.get_chat_member(chat_id="@invest_captain", user_id=user_id[0])

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            if member.status not in ['creator', 'administrator', 'member']:
                channel_link = "https://t.me/astra_ban"
                markup = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribe")]
                ])
                await bot.send_message(
                    user_id[0],
                    f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, "
                    f"–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: {channel_link}",
                    reply_markup=markup
                )
                fail += 1  # –û—Ç–º–µ—Ç–∏–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id[0], text)
                success += 1

        except TelegramAPIError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")
            fail += 1

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ª—é–¥–µ–π: {fail}.")
    await state.clear()


@dp.callback_query(lambda call: call.data == "subscribe")
async def subscribe_button_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    message = call.message  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        member = await bot.get_chat_member(chat_id="@invest_captain", user_id=user_id)

        if member.status in ['creator', 'administrator', 'member']:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            await update_subscription(user_id, status=True)
            await call.message.answer(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            channel_link = "https://t.me/astra_ban"
            await call.message.answer(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:{channel_link} –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribe")]
                ])
            )
    except TelegramAPIError:
        await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await call.answer()

# –ö–æ–º–∞–Ω–¥–∞ /getdata –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel-—Ñ–∞–π–ª–∞
@dp.message(Command("getdata"))
async def get_data(message: Message):
    if message.from_user.username not in ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏...")

    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id, user_id, username, message, timestamp FROM alerts')
        data = cursor.fetchall()

    if not data:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    temp_file = f"alerts_{message.chat.id}.xlsx"
    workbook = openpyxl.Workbook()
    sheet = workbook.active
    sheet.title = "Reports"

    sheet.append(["ID", "User ID", "Username", "Message", "Timestamp"])
    for row in data:
        sheet.append(row)

    workbook.save(temp_file)

    try:
        await message.answer_document(types.FSInputFile(temp_file), caption="–í–æ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∞—Ö.")
    finally:
        os.remove(temp_file)

# –ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(Command("broadcast"))
async def broadcast(message: Message, state: FSMContext):
    if message.from_user.username not in ADMIN_USERNAME:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.set_state(UserStates.waiting_for_broadcast_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(UserStates.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    text = message.text
    success, fail = 0, 0

    with sqlite3.connect(DATABASE) as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT DISTINCT user_id FROM alerts')
        user_ids = cursor.fetchall()

    for user_id in user_ids:
        try:
            await bot.send_message(user_id[0], text)
            success += 1
        except TelegramAPIError:
            fail += 1

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {fail}.")
    await state.clear()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())